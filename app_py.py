# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16wwNeBRKTRrbWZ_Ygn0HIObFQWOM3Ncc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/customer_churn_data.csv')
df.head()

df.info()

df.isna().sum().sum()

df["InternetService"] = df["InternetService"].fillna("")

df.isna().sum().sum()

df.head()

df.duplicated().sum()

df.describe()

numeric_columns_data = df.select_dtypes(include = ["number"])
numeric_columns_data.corr()

df["Churn"].value_counts().plot(kind="pie")
plt.title("Churn (Yes/No)")
plt.ylabel("")
plt.show()

df.groupby("Churn")["MonthlyCharges"].mean()

df.groupby(["Churn","Gender"])["MonthlyCharges"].mean()

df.groupby("Churn")["Tenure"].mean()

df.groupby("Churn")["Age"].mean()

df.groupby("ContractType")["MonthlyCharges"].mean().plot(kind="bar")
plt.title("Contract Type Avrage Price")
plt.ylabel("Mean Price")
plt.xlabel("Contract Type")
plt.show()

plt.hist(df["MonthlyCharges"])
plt.title("Monthly Charges Histogram")
plt.show()

plt.hist(df["Tenure"])
plt.title("Tenure Histogram")
plt.show()

"""Feature Engineering"""

df.columns

df.head(1)

y = df["Churn"]
x = df [["Age","Gender","Tenure","MonthlyCharges"]]

x #1 Female / 0 Male

x["Gender"] = x["Gender"].apply(lambda x: 1 if x == "Female" else 0)

x.head()

type(x["Gender"][0])

y

y = y.apply(lambda x: 1 if x == "Yes" else 0)

type(y[0])

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)

x

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

x_train = scaler.fit_transform(x_train)

import joblib
joblib.dump(scaler,"scaler.pkl")

x_test = scaler.fit_transform(x_test)

x_train

from sklearn.metrics import accuracy_score
def modelperformance(predictions):
  print("Accuracy score on model is {}".format(accuracy_score(y_test, predictions)))

from sklearn.model_selection import GridSearchCV

from sklearn.linear_model import LogisticRegression

log_model = LogisticRegression()

import warnings
warnings.filterwarnings("ignore")

log_model.fit(x_train, y_train)

y_pred = log_model.predict(x_test)

modelperformance(y_pred)

from sklearn.neighbors import KNeighborsClassifier

param_grid = {"n_neighbors":(3,5,7,9),"weights":("uniform","distance")}

gridkn = GridSearchCV(KNeighborsClassifier(),param_grid,cv=5)

gridkn.fit(x_train,y_train)

gridkn.best_params_

y_pred = gridkn.predict(x_test)

modelperformance(y_pred)

from sklearn.svm import SVC

svm = SVC()

param_grid = {
    "C" :[0.01,0.1,0.5,1],
    "kernel":["linear","poly","rbf"]
}

gridsvc = GridSearchCV(svm, param_grid, cv =5)

gridsvc.fit(x_train,y_train)

gridsvc.best_params_

y_pred = gridsvc.predict(x_test)

modelperformance(y_pred)

from sklearn.tree import DecisionTreeClassifier

param_grid = {
    "criterion":["gini","entropy"],
    "max_depth":[None, 10,20,30],
    "splitter":["best","random"],
    "min_samples_split":[2,5,10]
}

grid_tree = GridSearchCV(DecisionTreeClassifier(),param_grid,cv=5)

grid_tree.fit(x_train,y_train)

grid_tree.best_params_

y_pred = grid_tree.predict(x_test)

y_pred

modelperformance(y_pred)

from sklearn.ensemble import RandomForestClassifier
rfc_model = RandomForestClassifier()

param_grid ={
    "n_estimators":[32,64,189,256],
    "max_features":[2,3,4],
    "bootstrap":[True,False]
}

grid_rfc = GridSearchCV(rfc_model,param_grid,cv=5)

grid_rfc.fit(x_train, y_train)

grid_rfc.best_params_

y_pred = grid_rfc.predict(x_test)

modelperformance(y_pred)

best_model = gridsvc.best_estimator_

joblib.dump(best_model,"model.pkl")

x.columns

#-------------------------------------------- APP ---------------------------------------------//

# Gender --> 1 Female / 0 Male
# Churn --> 1 Yes / 0 No
# Scaler is exported as Scaler.pkl
# Model is exported as model.pkl
# Order of the X --> 'Age', 'Gender', 'Tenure', 'MonthlyCharges'

!pip install streamlit

import streamlit as st
import joblib
import numpy as np

scaler = joblib.load("/content/scaler.pkl")
model = joblib.load("/content/model.pkl")

st.title("Customer Churn Prediction App")

st.divider

st.write("Please enter the values and hit the predict button for getting a prediction.")
st.divider()
age = st.number_input("Enter Age", min_value=10, max_value=100, value=30)
gender = st.selectbox("Select Gender", ["Male", "Female"])
tenure = st.number_input("Enter Tenure", min_value=0, max_value=130, value=10)
monthly_charges = st.number_input("Enter Monthly Charges", min_value=30, max_value=150)
st.divider()

predictbutton = st.button("Predict")
if predictbutton:
    gender_selected = 1 if gender == "Female" else 0
    x = [age, gender_selected, tenure, monthly_charges]
    x1 = np.array(x)
    x_array =scaler.transform([x1])
    prediction = model.predict(x_array)[0]
    predicted = "Yes" if prediction == 1 else "No"
    st.write(f"predicted :{predicted}")
else:
    st.write("Please enter the value and use predict button")

!pip install streamlit pyngrok --quiet

!ngrok config add-authtoken 30rf8M7C9JwxlEfP91PaZLPXprv_4MyrKifFwwnXmzJzGTzys

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# 
# st.title("Hello from Streamlit in Colab ðŸš€")
# st.write("Your app is running using Ngrok!")

from pyngrok import ngrok
import time

# Clean up existing processes
!killall streamlit > /dev/null 2>&1
!pkill -f ngrok > /dev/null 2>&1

# Start Streamlit app
!streamlit run app.py &>/content/logs.txt &

# Wait for server to start
time.sleep(5)

# âœ… Correct port usage (not a string!)
public_url = ngrok.connect(8501)
print("ðŸ”— App is live at:", public_url)